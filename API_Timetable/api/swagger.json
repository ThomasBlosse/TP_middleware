{
    "swagger": "2.0",
    "info": {
        "description": "API to manage collections.",
        "title": "Timetable API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Alban.Munari",
            "email": "Alban.MUNARI@etu.uca.fr"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/collections": {
            "get": {
                "description": "Get collections.",
                "tags": [
                    "collections"
                ],
                "summary": "Get collections.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Collection"
                            }
                        }
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            },
            "post": {
                "description": "Add a new collection to the database.",
                "tags": [
                    "collections"
                ],
                "summary": "Create a new collection.",
                "parameters": [
                    {
                        "description": "Collection data",
                        "name": "collection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Collection"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Collection"
                        }
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/collections/{id}": {
            "get": {
                "description": "Get a collection.",
                "tags": [
                    "collections"
                ],
                "summary": "Get a collection.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection UUID formatted ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Collection"
                        }
                    },
                    "422": {
                        "description": "Cannot parse id"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            },
            "put": {
                "description": "Modify an existing item in a collection.",
                "tags": [
                    "collections"
                ],
                "summary": "Update an item in a collection.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection UUID formatted ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated item data",
                        "name": "item",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Collection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item updated successfully"
                    },
                    "400": {
                        "description": "Invalid request body"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            },
            "delete": {
                "description": "Remove a specific item from a collection.",
                "tags": [
                    "collections"
                ],
                "summary": "Delete an item from a collection.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection UUID formatted ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Item UUID formatted ID",
                        "name": "item_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item deleted successfully"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Collection": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "end": {
                    "type": "string"
                },
                "lastupdate": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "resourceIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "started": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            }
        }
    }
}